function getEnumToArray(enumType) {
  return Object.keys(enumType)
    .filter((value) => isNaN(Number(value)) === false)
    .map((key) => `${key} : ${enumType[key]}`);
}

function getEnumTypeValues(enumType) {
  return Object.keys(enumType)
    .map((key) => enumType[key])
    .filter((value) => typeof value === 'number');
}

enum STATUS_TYPE {
  NORMAL = 1,
  FORBIDDEN,
}

enum CATEGORY_TYPE {
  CONCERT = 1,
  UNIVERSITY,
  FITNESS,
  EXHIBITION,
  AMUSEMENT_PARK,
  HAN_RIVER_PRAk,
}

enum CHAT_TYPE {
  A = 1,
  B,
}

enum EVENT_TYPE {
  CHAT = 1,
  QUESTION,
}

enum SEX_TYPE {
  MALE = 1,
  FEMALE,
}

enum USER_TYPE {
  OPENING = 1,
  UN_OPENING,
  STUDENT,
}

enum REQ_STATE_TYPE {
  WAIT = 1,
  RETURN,
  CHECKING,
  APPROVAL,
  CANCEL,
}

enum LOGIN_ERROR_CODE {
  NOT_EXIST_ID,
  NOT_MATCH_AUTH_DATA,
  LOGIN_LOCK,
  LOGIN_UN_ACTIVE,
}

enum TOKEN_ERROR_CODE {
  NOT_EXIST_TOKEN,
  TOKEN_EXPIRED,
  NOT_VALID_TOKEN,
  NOT_ACCOUNT,
}

enum COMPANY_TYPE {
  PHARMACEUTICAL = 1,
  CONSULTING,
}

enum SPECIALITY_TYPE {
  GP = 1,
  NH,
  GH,
  PH,
  LAW,
  LABOR,
  TAX,
}

enum MANAGER_TYPE {
  ADMIN = 1,
  STAFF,
}

enum ACCOUNT_TYPE {
  USER = 1,
  MANAGER,
  OPERATOR,
}

enum CONTENT_TYPE {
  CONSULTING = 1,
  E_DETAILING,
  EVENT,
  COMMENT,
  COMPANY,
  WEBINAR,
  VIEW,
  SCRAP,
  LIKE,
}

enum CQ_SEARCH_TYPE {
  ALL = 1,
  USER_MY_QUESTION,
  USER_MY_ANSWER,
  MANAGER_MY_ANSWER,
  MANAGER_SELECTED_ANSWER,
  MANAGER_WAIT_ANSWER,
}

enum SORT_TYPE {
  POPULARITY = 1,
  LATEST,
}

enum EDETAILING_TYPE {
  BROCHURE = 1,
  CLINICAL,
}

enum POST_LOCATION_TYPE {
  TOP = 1,
  MIDDLE,
  BOTTOM,
}

enum E_DETAILING_SEARCH_TYPE {
  VIEW_ORDER = 1,
  DOCTOR,
  AREA,
}

enum EVENT_SEARCH_TYPE {
  HOME_POST = 1,
  CLOSE_END,
}

enum WEBINAR_SEARCH_TYPE {
  VIEW_ORDER = 1,
  DOCTOR,
  CLOSE_END,
  PARTICIPATE_ORDER,
}

enum CONTENT_SEARCH_ACCOUNT_TYPE {
  USER = 1,
  PHARMACEUTICAL,
  CONSULTING,
}

enum CONTENT_COMMENT_SEARCH_ACCOUNT_TYPE {
  USER_DOCTOR = 1,
  USER_STUDENT,
  MANAGER_PHARMACEUTICAL,
  MANAGER_CONSULTING,
}

enum STATISTICS_USER_ACTIVE_REPORT_SEARCH_TYPE {
  CLINICAL = 1,
  COMPANY,
  CONTENT,
  CAREER_YEAR_GROUP_KEYWORD,
  WEBINAR,
}

enum STATISTICS_USER_SCRAP_REPORT_SEARCH_TYPE {
  SCRAP_THIS_WEEK = 1,
  SCRAP_DISTRICT,
  SCRAP_CAREER_YEAR,
  VIEW_DAILY,
}

enum STATISTICS_USER_BANNER_REPORT_SEARCH_TYPE {
  CAREER,
  AREA,
  TREATMENT,
}

enum NOTIFICATION_POST_TYPE {
  USER_NOTI = 1,
  MANAGER_WEB_NOTI,
  MANAGER_WEB_MAIN,
  MANAGER_APP_TOTDAY,
}

enum SCHEDULE_TYPE {
  PREARRANGED = 1,
  PAST,
  CANCEL,
}

enum CUSTOMER_QUESTION_TYPE {
  USE = 1,
  IMPROVE_ERROR,
  WITHDRAWAL,
  EVENT_OFFER,
  ETC,
}

enum STR_CUSTOMER_QUESTION_TYPE {
  '사용문의' = 1,
  '개선/오류',
  '정지/해지',
  '광고/입점문의',
  '기타',
}

export {
  getEnumToArray,
  getEnumTypeValues,
  SEX_TYPE,
  USER_TYPE,
  REQ_STATE_TYPE,
  LOGIN_ERROR_CODE,
  TOKEN_ERROR_CODE,
  COMPANY_TYPE,
  SPECIALITY_TYPE,
  MANAGER_TYPE,
  ACCOUNT_TYPE,
  CONTENT_TYPE,
  CQ_SEARCH_TYPE,
  SORT_TYPE,
  EDETAILING_TYPE,
  POST_LOCATION_TYPE,
  E_DETAILING_SEARCH_TYPE,
  EVENT_SEARCH_TYPE,
  WEBINAR_SEARCH_TYPE,
  CONTENT_SEARCH_ACCOUNT_TYPE,
  CONTENT_COMMENT_SEARCH_ACCOUNT_TYPE,
  STATISTICS_USER_ACTIVE_REPORT_SEARCH_TYPE,
  STATISTICS_USER_SCRAP_REPORT_SEARCH_TYPE,
  STATISTICS_USER_BANNER_REPORT_SEARCH_TYPE,
  NOTIFICATION_POST_TYPE,
  SCHEDULE_TYPE,
  CUSTOMER_QUESTION_TYPE,
  STR_CUSTOMER_QUESTION_TYPE,
  STATUS_TYPE,
  CATEGORY_TYPE,
  CHAT_TYPE,
  EVENT_TYPE,
};
